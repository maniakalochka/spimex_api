services:
  db:
    image: postgres:16-alpine
    container_name: spimex_db
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 10

  test_db:
    image: postgres:16-alpine
    container_name: spimex_test_db
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB}
      POSTGRES_USER: ${POSTGRES_TEST_USER}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD}
    ports:
      - "${POSTGRES_TEST_PORT}:5432"
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - test_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_TEST_USER} -d ${POSTGRES_TEST_DB}",
        ]
      interval: 3s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: spimex_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spimex_web
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: ["bash", "run.sh"]
    volumes:
      - ./src:/app/src:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./poetry.lock:/app/poetry.lock:ro

volumes:
  db_data:
  test_db_data:
  redis_data:
